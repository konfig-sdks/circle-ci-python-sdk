# coding: utf-8

"""
    CircleCI API

    This describes the resources that make up the CircleCI API v2.

    The version of the OpenAPI document: v2
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle_ci_python_sdk import schemas  # noqa: F401


class JobGetDetailsResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Job Details
    """


    class MetaOapg:
        required = {
            "latest_workflow",
            "queued_at",
            "parallelism",
            "created_at",
            "project",
            "contexts",
            "duration",
            "pipeline",
            "number",
            "web_url",
            "executor",
            "organization",
            "name",
            "messages",
            "started_at",
            "parallel_runs",
            "status",
        }
        
        class properties:
            web_url = schemas.StrSchema
        
            @staticmethod
            def project() -> typing.Type['JobGetDetailsResponseProject']:
                return JobGetDetailsResponseProject
        
            @staticmethod
            def parallel_runs() -> typing.Type['JobGetDetailsResponseParallelRuns']:
                return JobGetDetailsResponseParallelRuns
            started_at = schemas.DateTimeSchema
        
            @staticmethod
            def latest_workflow() -> typing.Type['JobGetDetailsResponseLatestWorkflow']:
                return JobGetDetailsResponseLatestWorkflow
            name = schemas.StrSchema
        
            @staticmethod
            def executor() -> typing.Type['JobGetDetailsResponseExecutor']:
                return JobGetDetailsResponseExecutor
            parallelism = schemas.Int64Schema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def SUCCESS(cls):
                    return cls("success")
                
                @schemas.classproperty
                def RUNNING(cls):
                    return cls("running")
                
                @schemas.classproperty
                def NOT_RUN(cls):
                    return cls("not_run")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("failed")
                
                @schemas.classproperty
                def RETRIED(cls):
                    return cls("retried")
                
                @schemas.classproperty
                def QUEUED(cls):
                    return cls("queued")
                
                @schemas.classproperty
                def NOT_RUNNING(cls):
                    return cls("not_running")
                
                @schemas.classproperty
                def INFRASTRUCTURE_FAIL(cls):
                    return cls("infrastructure_fail")
                
                @schemas.classproperty
                def TIMEDOUT(cls):
                    return cls("timedout")
                
                @schemas.classproperty
                def ON_HOLD(cls):
                    return cls("on_hold")
                
                @schemas.classproperty
                def TERMINATEDUNKNOWN(cls):
                    return cls("terminated-unknown")
                
                @schemas.classproperty
                def BLOCKED(cls):
                    return cls("blocked")
                
                @schemas.classproperty
                def CANCELED(cls):
                    return cls("canceled")
                
                @schemas.classproperty
                def UNAUTHORIZED(cls):
                    return cls("unauthorized")
            number = schemas.Int64Schema
        
            @staticmethod
            def pipeline() -> typing.Type['JobGetDetailsResponsePipeline']:
                return JobGetDetailsResponsePipeline
            duration = schemas.Int64Schema
            created_at = schemas.DateTimeSchema
        
            @staticmethod
            def messages() -> typing.Type['JobGetDetailsResponseMessages']:
                return JobGetDetailsResponseMessages
        
            @staticmethod
            def contexts() -> typing.Type['JobGetDetailsResponseContexts']:
                return JobGetDetailsResponseContexts
        
            @staticmethod
            def organization() -> typing.Type['JobGetDetailsResponseOrganization']:
                return JobGetDetailsResponseOrganization
            queued_at = schemas.DateTimeSchema
            stopped_at = schemas.DateTimeSchema
            __annotations__ = {
                "web_url": web_url,
                "project": project,
                "parallel_runs": parallel_runs,
                "started_at": started_at,
                "latest_workflow": latest_workflow,
                "name": name,
                "executor": executor,
                "parallelism": parallelism,
                "status": status,
                "number": number,
                "pipeline": pipeline,
                "duration": duration,
                "created_at": created_at,
                "messages": messages,
                "contexts": contexts,
                "organization": organization,
                "queued_at": queued_at,
                "stopped_at": stopped_at,
            }
    
    latest_workflow: 'JobGetDetailsResponseLatestWorkflow'
    queued_at: MetaOapg.properties.queued_at
    parallelism: MetaOapg.properties.parallelism
    created_at: MetaOapg.properties.created_at
    project: 'JobGetDetailsResponseProject'
    contexts: 'JobGetDetailsResponseContexts'
    duration: MetaOapg.properties.duration
    pipeline: 'JobGetDetailsResponsePipeline'
    number: MetaOapg.properties.number
    web_url: MetaOapg.properties.web_url
    executor: 'JobGetDetailsResponseExecutor'
    organization: 'JobGetDetailsResponseOrganization'
    name: MetaOapg.properties.name
    messages: 'JobGetDetailsResponseMessages'
    started_at: MetaOapg.properties.started_at
    parallel_runs: 'JobGetDetailsResponseParallelRuns'
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["web_url"]) -> MetaOapg.properties.web_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project"]) -> 'JobGetDetailsResponseProject': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parallel_runs"]) -> 'JobGetDetailsResponseParallelRuns': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["started_at"]) -> MetaOapg.properties.started_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latest_workflow"]) -> 'JobGetDetailsResponseLatestWorkflow': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["executor"]) -> 'JobGetDetailsResponseExecutor': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parallelism"]) -> MetaOapg.properties.parallelism: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number"]) -> MetaOapg.properties.number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pipeline"]) -> 'JobGetDetailsResponsePipeline': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["messages"]) -> 'JobGetDetailsResponseMessages': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contexts"]) -> 'JobGetDetailsResponseContexts': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization"]) -> 'JobGetDetailsResponseOrganization': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["queued_at"]) -> MetaOapg.properties.queued_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stopped_at"]) -> MetaOapg.properties.stopped_at: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["web_url", "project", "parallel_runs", "started_at", "latest_workflow", "name", "executor", "parallelism", "status", "number", "pipeline", "duration", "created_at", "messages", "contexts", "organization", "queued_at", "stopped_at", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["web_url"]) -> MetaOapg.properties.web_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> 'JobGetDetailsResponseProject': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parallel_runs"]) -> 'JobGetDetailsResponseParallelRuns': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["started_at"]) -> MetaOapg.properties.started_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latest_workflow"]) -> 'JobGetDetailsResponseLatestWorkflow': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["executor"]) -> 'JobGetDetailsResponseExecutor': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parallelism"]) -> MetaOapg.properties.parallelism: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number"]) -> MetaOapg.properties.number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pipeline"]) -> 'JobGetDetailsResponsePipeline': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["messages"]) -> 'JobGetDetailsResponseMessages': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contexts"]) -> 'JobGetDetailsResponseContexts': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization"]) -> 'JobGetDetailsResponseOrganization': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["queued_at"]) -> MetaOapg.properties.queued_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stopped_at"]) -> typing.Union[MetaOapg.properties.stopped_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["web_url", "project", "parallel_runs", "started_at", "latest_workflow", "name", "executor", "parallelism", "status", "number", "pipeline", "duration", "created_at", "messages", "contexts", "organization", "queued_at", "stopped_at", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        latest_workflow: 'JobGetDetailsResponseLatestWorkflow',
        queued_at: typing.Union[MetaOapg.properties.queued_at, str, datetime, ],
        parallelism: typing.Union[MetaOapg.properties.parallelism, decimal.Decimal, int, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, ],
        project: 'JobGetDetailsResponseProject',
        contexts: 'JobGetDetailsResponseContexts',
        duration: typing.Union[MetaOapg.properties.duration, decimal.Decimal, int, ],
        pipeline: 'JobGetDetailsResponsePipeline',
        number: typing.Union[MetaOapg.properties.number, decimal.Decimal, int, ],
        web_url: typing.Union[MetaOapg.properties.web_url, str, ],
        executor: 'JobGetDetailsResponseExecutor',
        organization: 'JobGetDetailsResponseOrganization',
        name: typing.Union[MetaOapg.properties.name, str, ],
        messages: 'JobGetDetailsResponseMessages',
        started_at: typing.Union[MetaOapg.properties.started_at, str, datetime, ],
        parallel_runs: 'JobGetDetailsResponseParallelRuns',
        status: typing.Union[MetaOapg.properties.status, str, ],
        stopped_at: typing.Union[MetaOapg.properties.stopped_at, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JobGetDetailsResponse':
        return super().__new__(
            cls,
            *args,
            latest_workflow=latest_workflow,
            queued_at=queued_at,
            parallelism=parallelism,
            created_at=created_at,
            project=project,
            contexts=contexts,
            duration=duration,
            pipeline=pipeline,
            number=number,
            web_url=web_url,
            executor=executor,
            organization=organization,
            name=name,
            messages=messages,
            started_at=started_at,
            parallel_runs=parallel_runs,
            status=status,
            stopped_at=stopped_at,
            _configuration=_configuration,
            **kwargs,
        )

from circle_ci_python_sdk.model.job_get_details_response_contexts import JobGetDetailsResponseContexts
from circle_ci_python_sdk.model.job_get_details_response_executor import JobGetDetailsResponseExecutor
from circle_ci_python_sdk.model.job_get_details_response_latest_workflow import JobGetDetailsResponseLatestWorkflow
from circle_ci_python_sdk.model.job_get_details_response_messages import JobGetDetailsResponseMessages
from circle_ci_python_sdk.model.job_get_details_response_organization import JobGetDetailsResponseOrganization
from circle_ci_python_sdk.model.job_get_details_response_parallel_runs import JobGetDetailsResponseParallelRuns
from circle_ci_python_sdk.model.job_get_details_response_pipeline import JobGetDetailsResponsePipeline
from circle_ci_python_sdk.model.job_get_details_response_project import JobGetDetailsResponseProject
