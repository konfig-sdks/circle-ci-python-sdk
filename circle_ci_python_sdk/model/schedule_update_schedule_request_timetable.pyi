# coding: utf-8

"""
    CircleCI API

    This describes the resources that make up the CircleCI API v2.

    The version of the OpenAPI document: v2
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle_ci_python_sdk import schemas  # noqa: F401


class ScheduleUpdateScheduleRequestTimetable(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Timetable that specifies when a schedule triggers.
    """


    class MetaOapg:
        
        class properties:
            per_hour = schemas.IntSchema
        
            @staticmethod
            def hours_of_day() -> typing.Type['ScheduleUpdateScheduleRequestTimetableHoursOfDay']:
                return ScheduleUpdateScheduleRequestTimetableHoursOfDay
        
            @staticmethod
            def days_of_week() -> typing.Type['ScheduleUpdateScheduleRequestTimetableDaysOfWeek']:
                return ScheduleUpdateScheduleRequestTimetableDaysOfWeek
        
            @staticmethod
            def days_of_month() -> typing.Type['ScheduleUpdateScheduleRequestTimetableDaysOfMonth']:
                return ScheduleUpdateScheduleRequestTimetableDaysOfMonth
        
            @staticmethod
            def months() -> typing.Type['ScheduleUpdateScheduleRequestTimetableMonths']:
                return ScheduleUpdateScheduleRequestTimetableMonths
            __annotations__ = {
                "per-hour": per_hour,
                "hours-of-day": hours_of_day,
                "days-of-week": days_of_week,
                "days-of-month": days_of_month,
                "months": months,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["per-hour"]) -> MetaOapg.properties.per_hour: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hours-of-day"]) -> 'ScheduleUpdateScheduleRequestTimetableHoursOfDay': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["days-of-week"]) -> 'ScheduleUpdateScheduleRequestTimetableDaysOfWeek': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["days-of-month"]) -> 'ScheduleUpdateScheduleRequestTimetableDaysOfMonth': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["months"]) -> 'ScheduleUpdateScheduleRequestTimetableMonths': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["per-hour", "hours-of-day", "days-of-week", "days-of-month", "months", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["per-hour"]) -> typing.Union[MetaOapg.properties.per_hour, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hours-of-day"]) -> typing.Union['ScheduleUpdateScheduleRequestTimetableHoursOfDay', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["days-of-week"]) -> typing.Union['ScheduleUpdateScheduleRequestTimetableDaysOfWeek', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["days-of-month"]) -> typing.Union['ScheduleUpdateScheduleRequestTimetableDaysOfMonth', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["months"]) -> typing.Union['ScheduleUpdateScheduleRequestTimetableMonths', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["per-hour", "hours-of-day", "days-of-week", "days-of-month", "months", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        months: typing.Union['ScheduleUpdateScheduleRequestTimetableMonths', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ScheduleUpdateScheduleRequestTimetable':
        return super().__new__(
            cls,
            *args,
            months=months,
            _configuration=_configuration,
            **kwargs,
        )

from circle_ci_python_sdk.model.schedule_update_schedule_request_timetable_days_of_month import ScheduleUpdateScheduleRequestTimetableDaysOfMonth
from circle_ci_python_sdk.model.schedule_update_schedule_request_timetable_days_of_week import ScheduleUpdateScheduleRequestTimetableDaysOfWeek
from circle_ci_python_sdk.model.schedule_update_schedule_request_timetable_hours_of_day import ScheduleUpdateScheduleRequestTimetableHoursOfDay
from circle_ci_python_sdk.model.schedule_update_schedule_request_timetable_months import ScheduleUpdateScheduleRequestTimetableMonths
