# coding: utf-8

"""
    CircleCI API

    This describes the resources that make up the CircleCI API v2.

    The version of the OpenAPI document: v2
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle_ci_python_sdk import schemas  # noqa: F401


class InsightsGetJobTimeseriesDataResponseItemsItemMetrics(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Metrics relating to a workflow's runs.
    """


    class MetaOapg:
        required = {
            "total_runs",
            "successful_runs",
            "median_credits_used",
            "duration_metrics",
            "failed_runs",
            "total_credits_used",
            "throughput",
        }
        
        class properties:
            
            
            class total_runs(
                schemas.Int64Schema
            ):
                pass
            
            
            class failed_runs(
                schemas.Int64Schema
            ):
                pass
            
            
            class successful_runs(
                schemas.Int64Schema
            ):
                pass
            throughput = schemas.Float32Schema
            
            
            class median_credits_used(
                schemas.Int64Schema
            ):
                pass
            
            
            class total_credits_used(
                schemas.Int64Schema
            ):
                pass
        
            @staticmethod
            def duration_metrics() -> typing.Type['InsightsGetJobTimeseriesDataResponseItemsItemMetricsDurationMetrics']:
                return InsightsGetJobTimeseriesDataResponseItemsItemMetricsDurationMetrics
            __annotations__ = {
                "total_runs": total_runs,
                "failed_runs": failed_runs,
                "successful_runs": successful_runs,
                "throughput": throughput,
                "median_credits_used": median_credits_used,
                "total_credits_used": total_credits_used,
                "duration_metrics": duration_metrics,
            }
    
    total_runs: MetaOapg.properties.total_runs
    successful_runs: MetaOapg.properties.successful_runs
    median_credits_used: MetaOapg.properties.median_credits_used
    duration_metrics: 'InsightsGetJobTimeseriesDataResponseItemsItemMetricsDurationMetrics'
    failed_runs: MetaOapg.properties.failed_runs
    total_credits_used: MetaOapg.properties.total_credits_used
    throughput: MetaOapg.properties.throughput
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_runs"]) -> MetaOapg.properties.total_runs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["failed_runs"]) -> MetaOapg.properties.failed_runs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["successful_runs"]) -> MetaOapg.properties.successful_runs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["throughput"]) -> MetaOapg.properties.throughput: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["median_credits_used"]) -> MetaOapg.properties.median_credits_used: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_credits_used"]) -> MetaOapg.properties.total_credits_used: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration_metrics"]) -> 'InsightsGetJobTimeseriesDataResponseItemsItemMetricsDurationMetrics': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["total_runs", "failed_runs", "successful_runs", "throughput", "median_credits_used", "total_credits_used", "duration_metrics", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_runs"]) -> MetaOapg.properties.total_runs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["failed_runs"]) -> MetaOapg.properties.failed_runs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["successful_runs"]) -> MetaOapg.properties.successful_runs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["throughput"]) -> MetaOapg.properties.throughput: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["median_credits_used"]) -> MetaOapg.properties.median_credits_used: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_credits_used"]) -> MetaOapg.properties.total_credits_used: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration_metrics"]) -> 'InsightsGetJobTimeseriesDataResponseItemsItemMetricsDurationMetrics': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["total_runs", "failed_runs", "successful_runs", "throughput", "median_credits_used", "total_credits_used", "duration_metrics", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        total_runs: typing.Union[MetaOapg.properties.total_runs, decimal.Decimal, int, ],
        successful_runs: typing.Union[MetaOapg.properties.successful_runs, decimal.Decimal, int, ],
        median_credits_used: typing.Union[MetaOapg.properties.median_credits_used, decimal.Decimal, int, ],
        duration_metrics: 'InsightsGetJobTimeseriesDataResponseItemsItemMetricsDurationMetrics',
        failed_runs: typing.Union[MetaOapg.properties.failed_runs, decimal.Decimal, int, ],
        total_credits_used: typing.Union[MetaOapg.properties.total_credits_used, decimal.Decimal, int, ],
        throughput: typing.Union[MetaOapg.properties.throughput, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InsightsGetJobTimeseriesDataResponseItemsItemMetrics':
        return super().__new__(
            cls,
            *args,
            total_runs=total_runs,
            successful_runs=successful_runs,
            median_credits_used=median_credits_used,
            duration_metrics=duration_metrics,
            failed_runs=failed_runs,
            total_credits_used=total_credits_used,
            throughput=throughput,
            _configuration=_configuration,
            **kwargs,
        )

from circle_ci_python_sdk.model.insights_get_job_timeseries_data_response_items_item_metrics_duration_metrics import InsightsGetJobTimeseriesDataResponseItemsItemMetricsDurationMetrics
