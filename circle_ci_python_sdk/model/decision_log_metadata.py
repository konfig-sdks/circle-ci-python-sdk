# coding: utf-8

"""
    CircleCI API

    This describes the resources that make up the CircleCI API v2.

    The version of the OpenAPI document: v2
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle_ci_python_sdk import schemas  # noqa: F401


class DecisionLogMetadata(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            build_number = schemas.IntSchema
            project_id = schemas.UUIDSchema
            ssh_rerun = schemas.BoolSchema
        
            @staticmethod
            def vcs() -> typing.Type['DecisionLogMetadataVcs']:
                return DecisionLogMetadataVcs
            __annotations__ = {
                "build_number": build_number,
                "project_id": project_id,
                "ssh_rerun": ssh_rerun,
                "vcs": vcs,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["build_number"]) -> MetaOapg.properties.build_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project_id"]) -> MetaOapg.properties.project_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssh_rerun"]) -> MetaOapg.properties.ssh_rerun: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vcs"]) -> 'DecisionLogMetadataVcs': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["build_number", "project_id", "ssh_rerun", "vcs", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["build_number"]) -> typing.Union[MetaOapg.properties.build_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project_id"]) -> typing.Union[MetaOapg.properties.project_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssh_rerun"]) -> typing.Union[MetaOapg.properties.ssh_rerun, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vcs"]) -> typing.Union['DecisionLogMetadataVcs', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["build_number", "project_id", "ssh_rerun", "vcs", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        build_number: typing.Union[MetaOapg.properties.build_number, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        project_id: typing.Union[MetaOapg.properties.project_id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        ssh_rerun: typing.Union[MetaOapg.properties.ssh_rerun, bool, schemas.Unset] = schemas.unset,
        vcs: typing.Union['DecisionLogMetadataVcs', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DecisionLogMetadata':
        return super().__new__(
            cls,
            *args,
            build_number=build_number,
            project_id=project_id,
            ssh_rerun=ssh_rerun,
            vcs=vcs,
            _configuration=_configuration,
            **kwargs,
        )

from circle_ci_python_sdk.model.decision_log_metadata_vcs import DecisionLogMetadataVcs
