# coding: utf-8

"""
    CircleCI API

    This describes the resources that make up the CircleCI API v2.

    The version of the OpenAPI document: v2
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle_ci_python_sdk import schemas  # noqa: F401


class PipelineListUserPipelinesResponseItemsItemVcs(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    VCS information for the pipeline.
    """


    class MetaOapg:
        required = {
            "target_repository_url",
            "provider_name",
            "origin_repository_url",
            "revision",
        }
        
        class properties:
            provider_name = schemas.StrSchema
            target_repository_url = schemas.StrSchema
            revision = schemas.StrSchema
            origin_repository_url = schemas.StrSchema
            branch = schemas.StrSchema
            review_id = schemas.StrSchema
            review_url = schemas.StrSchema
            tag = schemas.StrSchema
        
            @staticmethod
            def commit() -> typing.Type['PipelineListUserPipelinesResponseItemsItemVcsCommit']:
                return PipelineListUserPipelinesResponseItemsItemVcsCommit
            __annotations__ = {
                "provider_name": provider_name,
                "target_repository_url": target_repository_url,
                "revision": revision,
                "origin_repository_url": origin_repository_url,
                "branch": branch,
                "review_id": review_id,
                "review_url": review_url,
                "tag": tag,
                "commit": commit,
            }
    
    target_repository_url: MetaOapg.properties.target_repository_url
    provider_name: MetaOapg.properties.provider_name
    origin_repository_url: MetaOapg.properties.origin_repository_url
    revision: MetaOapg.properties.revision
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provider_name"]) -> MetaOapg.properties.provider_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target_repository_url"]) -> MetaOapg.properties.target_repository_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["revision"]) -> MetaOapg.properties.revision: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["origin_repository_url"]) -> MetaOapg.properties.origin_repository_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["branch"]) -> MetaOapg.properties.branch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["review_id"]) -> MetaOapg.properties.review_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["review_url"]) -> MetaOapg.properties.review_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tag"]) -> MetaOapg.properties.tag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["commit"]) -> 'PipelineListUserPipelinesResponseItemsItemVcsCommit': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["provider_name", "target_repository_url", "revision", "origin_repository_url", "branch", "review_id", "review_url", "tag", "commit", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provider_name"]) -> MetaOapg.properties.provider_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target_repository_url"]) -> MetaOapg.properties.target_repository_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["revision"]) -> MetaOapg.properties.revision: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["origin_repository_url"]) -> MetaOapg.properties.origin_repository_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["branch"]) -> typing.Union[MetaOapg.properties.branch, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["review_id"]) -> typing.Union[MetaOapg.properties.review_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["review_url"]) -> typing.Union[MetaOapg.properties.review_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tag"]) -> typing.Union[MetaOapg.properties.tag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["commit"]) -> typing.Union['PipelineListUserPipelinesResponseItemsItemVcsCommit', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["provider_name", "target_repository_url", "revision", "origin_repository_url", "branch", "review_id", "review_url", "tag", "commit", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        target_repository_url: typing.Union[MetaOapg.properties.target_repository_url, str, ],
        provider_name: typing.Union[MetaOapg.properties.provider_name, str, ],
        origin_repository_url: typing.Union[MetaOapg.properties.origin_repository_url, str, ],
        revision: typing.Union[MetaOapg.properties.revision, str, ],
        branch: typing.Union[MetaOapg.properties.branch, str, schemas.Unset] = schemas.unset,
        review_id: typing.Union[MetaOapg.properties.review_id, str, schemas.Unset] = schemas.unset,
        review_url: typing.Union[MetaOapg.properties.review_url, str, schemas.Unset] = schemas.unset,
        tag: typing.Union[MetaOapg.properties.tag, str, schemas.Unset] = schemas.unset,
        commit: typing.Union['PipelineListUserPipelinesResponseItemsItemVcsCommit', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PipelineListUserPipelinesResponseItemsItemVcs':
        return super().__new__(
            cls,
            *args,
            target_repository_url=target_repository_url,
            provider_name=provider_name,
            origin_repository_url=origin_repository_url,
            revision=revision,
            branch=branch,
            review_id=review_id,
            review_url=review_url,
            tag=tag,
            commit=commit,
            _configuration=_configuration,
            **kwargs,
        )

from circle_ci_python_sdk.model.pipeline_list_user_pipelines_response_items_item_vcs_commit import PipelineListUserPipelinesResponseItemsItemVcsCommit
