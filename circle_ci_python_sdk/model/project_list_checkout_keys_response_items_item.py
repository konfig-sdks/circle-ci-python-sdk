# coding: utf-8

"""
    CircleCI API

    This describes the resources that make up the CircleCI API v2.

    The version of the OpenAPI document: v2
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle_ci_python_sdk import schemas  # noqa: F401


class ProjectListCheckoutKeysResponseItemsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A checkout key
    """


    class MetaOapg:
        required = {
            "fingerprint",
            "public-key",
            "created-at",
            "type",
            "preferred",
        }
        
        class properties:
            public_key = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "deploy-key": "DEPLOYKEY",
                        "github-user-key": "GITHUBUSERKEY",
                    }
                
                @schemas.classproperty
                def DEPLOYKEY(cls):
                    return cls("deploy-key")
                
                @schemas.classproperty
                def GITHUBUSERKEY(cls):
                    return cls("github-user-key")
            fingerprint = schemas.StrSchema
            preferred = schemas.BoolSchema
            created_at = schemas.DateTimeSchema
            __annotations__ = {
                "public-key": public_key,
                "type": type,
                "fingerprint": fingerprint,
                "preferred": preferred,
                "created-at": created_at,
            }
    
    fingerprint: MetaOapg.properties.fingerprint
    type: MetaOapg.properties.type
    preferred: MetaOapg.properties.preferred
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["public-key"]) -> MetaOapg.properties.public_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fingerprint"]) -> MetaOapg.properties.fingerprint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preferred"]) -> MetaOapg.properties.preferred: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created-at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["public-key", "type", "fingerprint", "preferred", "created-at", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["public-key"]) -> MetaOapg.properties.public_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fingerprint"]) -> MetaOapg.properties.fingerprint: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preferred"]) -> MetaOapg.properties.preferred: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created-at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["public-key", "type", "fingerprint", "preferred", "created-at", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        fingerprint: typing.Union[MetaOapg.properties.fingerprint, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        preferred: typing.Union[MetaOapg.properties.preferred, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProjectListCheckoutKeysResponseItemsItem':
        return super().__new__(
            cls,
            *args,
            fingerprint=fingerprint,
            type=type,
            preferred=preferred,
            _configuration=_configuration,
            **kwargs,
        )
