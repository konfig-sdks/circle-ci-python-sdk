# coding: utf-8

"""
    CircleCI API

    This describes the resources that make up the CircleCI API v2.

    The version of the OpenAPI document: v2
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle_ci_python_sdk import schemas  # noqa: F401


class BundleDiff(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def created() -> typing.Type['BundleDiffCreated']:
                return BundleDiffCreated
        
            @staticmethod
            def deleted() -> typing.Type['BundleDiffDeleted']:
                return BundleDiffDeleted
        
            @staticmethod
            def modified() -> typing.Type['BundleDiffModified']:
                return BundleDiffModified
            __annotations__ = {
                "created": created,
                "deleted": deleted,
                "modified": modified,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> 'BundleDiffCreated': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleted"]) -> 'BundleDiffDeleted': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modified"]) -> 'BundleDiffModified': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["created", "deleted", "modified", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union['BundleDiffCreated', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleted"]) -> typing.Union['BundleDiffDeleted', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modified"]) -> typing.Union['BundleDiffModified', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["created", "deleted", "modified", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        created: typing.Union['BundleDiffCreated', schemas.Unset] = schemas.unset,
        deleted: typing.Union['BundleDiffDeleted', schemas.Unset] = schemas.unset,
        modified: typing.Union['BundleDiffModified', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BundleDiff':
        return super().__new__(
            cls,
            *args,
            created=created,
            deleted=deleted,
            modified=modified,
            _configuration=_configuration,
            **kwargs,
        )

from circle_ci_python_sdk.model.bundle_diff_created import BundleDiffCreated
from circle_ci_python_sdk.model.bundle_diff_deleted import BundleDiffDeleted
from circle_ci_python_sdk.model.bundle_diff_modified import BundleDiffModified
