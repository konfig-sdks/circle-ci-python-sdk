# coding: utf-8

"""
    CircleCI API

    This describes the resources that make up the CircleCI API v2.

    The version of the OpenAPI document: v2
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle_ci_python_sdk import schemas  # noqa: F401


class InsightsGetProjectWorkflowTestMetricsResponseSlowestTestsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "total_runs",
            "file",
            "classname",
            "job_name",
            "p95_duration",
            "flaky",
            "failed_runs",
            "source",
            "test_name",
        }
        
        class properties:
            p95_duration = schemas.Float64Schema
            
            
            class total_runs(
                schemas.Int64Schema
            ):
            
            
                class MetaOapg:
                    format = 'int64'
                    inclusive_minimum = 0
            classname = schemas.StrSchema
            
            
            class failed_runs(
                schemas.Int64Schema
            ):
            
            
                class MetaOapg:
                    format = 'int64'
                    inclusive_minimum = 0
            flaky = schemas.BoolSchema
            source = schemas.StrSchema
            file = schemas.StrSchema
            job_name = schemas.StrSchema
            test_name = schemas.StrSchema
            __annotations__ = {
                "p95_duration": p95_duration,
                "total_runs": total_runs,
                "classname": classname,
                "failed_runs": failed_runs,
                "flaky": flaky,
                "source": source,
                "file": file,
                "job_name": job_name,
                "test_name": test_name,
            }
    
    total_runs: MetaOapg.properties.total_runs
    file: MetaOapg.properties.file
    classname: MetaOapg.properties.classname
    job_name: MetaOapg.properties.job_name
    p95_duration: MetaOapg.properties.p95_duration
    flaky: MetaOapg.properties.flaky
    failed_runs: MetaOapg.properties.failed_runs
    source: MetaOapg.properties.source
    test_name: MetaOapg.properties.test_name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["p95_duration"]) -> MetaOapg.properties.p95_duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_runs"]) -> MetaOapg.properties.total_runs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["classname"]) -> MetaOapg.properties.classname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["failed_runs"]) -> MetaOapg.properties.failed_runs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flaky"]) -> MetaOapg.properties.flaky: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["file"]) -> MetaOapg.properties.file: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_name"]) -> MetaOapg.properties.job_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["test_name"]) -> MetaOapg.properties.test_name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["p95_duration", "total_runs", "classname", "failed_runs", "flaky", "source", "file", "job_name", "test_name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["p95_duration"]) -> MetaOapg.properties.p95_duration: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_runs"]) -> MetaOapg.properties.total_runs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["classname"]) -> MetaOapg.properties.classname: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["failed_runs"]) -> MetaOapg.properties.failed_runs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flaky"]) -> MetaOapg.properties.flaky: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["file"]) -> MetaOapg.properties.file: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_name"]) -> MetaOapg.properties.job_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["test_name"]) -> MetaOapg.properties.test_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["p95_duration", "total_runs", "classname", "failed_runs", "flaky", "source", "file", "job_name", "test_name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        total_runs: typing.Union[MetaOapg.properties.total_runs, decimal.Decimal, int, ],
        file: typing.Union[MetaOapg.properties.file, str, ],
        classname: typing.Union[MetaOapg.properties.classname, str, ],
        job_name: typing.Union[MetaOapg.properties.job_name, str, ],
        p95_duration: typing.Union[MetaOapg.properties.p95_duration, decimal.Decimal, int, float, ],
        flaky: typing.Union[MetaOapg.properties.flaky, bool, ],
        failed_runs: typing.Union[MetaOapg.properties.failed_runs, decimal.Decimal, int, ],
        source: typing.Union[MetaOapg.properties.source, str, ],
        test_name: typing.Union[MetaOapg.properties.test_name, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InsightsGetProjectWorkflowTestMetricsResponseSlowestTestsItem':
        return super().__new__(
            cls,
            *args,
            total_runs=total_runs,
            file=file,
            classname=classname,
            job_name=job_name,
            p95_duration=p95_duration,
            flaky=flaky,
            failed_runs=failed_runs,
            source=source,
            test_name=test_name,
            _configuration=_configuration,
            **kwargs,
        )
