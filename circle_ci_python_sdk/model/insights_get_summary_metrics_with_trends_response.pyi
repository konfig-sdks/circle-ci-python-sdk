# coding: utf-8

"""
    CircleCI API

    This describes the resources that make up the CircleCI API v2.

    The version of the OpenAPI document: v2
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle_ci_python_sdk import schemas  # noqa: F401


class InsightsGetSummaryMetricsWithTrendsResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Summary metrics with trends for the entire org, and for each project.
    """


    class MetaOapg:
        required = {
            "org_data",
            "org_project_data",
            "all_projects",
        }
        
        class properties:
        
            @staticmethod
            def org_data() -> typing.Type['InsightsGetSummaryMetricsWithTrendsResponseOrgData']:
                return InsightsGetSummaryMetricsWithTrendsResponseOrgData
        
            @staticmethod
            def org_project_data() -> typing.Type['InsightsGetSummaryMetricsWithTrendsResponseOrgProjectData']:
                return InsightsGetSummaryMetricsWithTrendsResponseOrgProjectData
        
            @staticmethod
            def all_projects() -> typing.Type['InsightsGetSummaryMetricsWithTrendsResponseAllProjects']:
                return InsightsGetSummaryMetricsWithTrendsResponseAllProjects
            __annotations__ = {
                "org_data": org_data,
                "org_project_data": org_project_data,
                "all_projects": all_projects,
            }
    
    org_data: 'InsightsGetSummaryMetricsWithTrendsResponseOrgData'
    org_project_data: 'InsightsGetSummaryMetricsWithTrendsResponseOrgProjectData'
    all_projects: 'InsightsGetSummaryMetricsWithTrendsResponseAllProjects'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_data"]) -> 'InsightsGetSummaryMetricsWithTrendsResponseOrgData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_project_data"]) -> 'InsightsGetSummaryMetricsWithTrendsResponseOrgProjectData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["all_projects"]) -> 'InsightsGetSummaryMetricsWithTrendsResponseAllProjects': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["org_data", "org_project_data", "all_projects", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_data"]) -> 'InsightsGetSummaryMetricsWithTrendsResponseOrgData': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_project_data"]) -> 'InsightsGetSummaryMetricsWithTrendsResponseOrgProjectData': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["all_projects"]) -> 'InsightsGetSummaryMetricsWithTrendsResponseAllProjects': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["org_data", "org_project_data", "all_projects", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        org_data: 'InsightsGetSummaryMetricsWithTrendsResponseOrgData',
        org_project_data: 'InsightsGetSummaryMetricsWithTrendsResponseOrgProjectData',
        all_projects: 'InsightsGetSummaryMetricsWithTrendsResponseAllProjects',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InsightsGetSummaryMetricsWithTrendsResponse':
        return super().__new__(
            cls,
            *args,
            org_data=org_data,
            org_project_data=org_project_data,
            all_projects=all_projects,
            _configuration=_configuration,
            **kwargs,
        )

from circle_ci_python_sdk.model.insights_get_summary_metrics_with_trends_response_all_projects import InsightsGetSummaryMetricsWithTrendsResponseAllProjects
from circle_ci_python_sdk.model.insights_get_summary_metrics_with_trends_response_org_data import InsightsGetSummaryMetricsWithTrendsResponseOrgData
from circle_ci_python_sdk.model.insights_get_summary_metrics_with_trends_response_org_project_data import InsightsGetSummaryMetricsWithTrendsResponseOrgProjectData
