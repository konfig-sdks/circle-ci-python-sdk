# coding: utf-8

"""
    CircleCI API

    This describes the resources that make up the CircleCI API v2.

    The version of the OpenAPI document: v2
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle_ci_python_sdk import schemas  # noqa: F401


class WorkflowGetByIdResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A workflow
    """


    class MetaOapg:
        required = {
            "project_slug",
            "pipeline_number",
            "name",
            "pipeline_id",
            "created_at",
            "id",
            "stopped_at",
            "started_by",
            "status",
        }
        
        class properties:
            pipeline_id = schemas.UUIDSchema
            id = schemas.UUIDSchema
            name = schemas.StrSchema
            project_slug = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "success": "SUCCESS",
                        "running": "RUNNING",
                        "not_run": "NOT_RUN",
                        "failed": "FAILED",
                        "error": "ERROR",
                        "failing": "FAILING",
                        "on_hold": "ON_HOLD",
                        "canceled": "CANCELED",
                        "unauthorized": "UNAUTHORIZED",
                    }
                
                @schemas.classproperty
                def SUCCESS(cls):
                    return cls("success")
                
                @schemas.classproperty
                def RUNNING(cls):
                    return cls("running")
                
                @schemas.classproperty
                def NOT_RUN(cls):
                    return cls("not_run")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("failed")
                
                @schemas.classproperty
                def ERROR(cls):
                    return cls("error")
                
                @schemas.classproperty
                def FAILING(cls):
                    return cls("failing")
                
                @schemas.classproperty
                def ON_HOLD(cls):
                    return cls("on_hold")
                
                @schemas.classproperty
                def CANCELED(cls):
                    return cls("canceled")
                
                @schemas.classproperty
                def UNAUTHORIZED(cls):
                    return cls("unauthorized")
            started_by = schemas.UUIDSchema
            pipeline_number = schemas.Int64Schema
            created_at = schemas.DateTimeSchema
            stopped_at = schemas.DateTimeSchema
            canceled_by = schemas.UUIDSchema
            errored_by = schemas.UUIDSchema
            
            
            class tag(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "setup": "SETUP",
                    }
                
                @schemas.classproperty
                def SETUP(cls):
                    return cls("setup")
            __annotations__ = {
                "pipeline_id": pipeline_id,
                "id": id,
                "name": name,
                "project_slug": project_slug,
                "status": status,
                "started_by": started_by,
                "pipeline_number": pipeline_number,
                "created_at": created_at,
                "stopped_at": stopped_at,
                "canceled_by": canceled_by,
                "errored_by": errored_by,
                "tag": tag,
            }
    
    project_slug: MetaOapg.properties.project_slug
    pipeline_number: MetaOapg.properties.pipeline_number
    name: MetaOapg.properties.name
    pipeline_id: MetaOapg.properties.pipeline_id
    created_at: MetaOapg.properties.created_at
    id: MetaOapg.properties.id
    stopped_at: MetaOapg.properties.stopped_at
    started_by: MetaOapg.properties.started_by
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pipeline_id"]) -> MetaOapg.properties.pipeline_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project_slug"]) -> MetaOapg.properties.project_slug: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["started_by"]) -> MetaOapg.properties.started_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pipeline_number"]) -> MetaOapg.properties.pipeline_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stopped_at"]) -> MetaOapg.properties.stopped_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["canceled_by"]) -> MetaOapg.properties.canceled_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errored_by"]) -> MetaOapg.properties.errored_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tag"]) -> MetaOapg.properties.tag: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["pipeline_id", "id", "name", "project_slug", "status", "started_by", "pipeline_number", "created_at", "stopped_at", "canceled_by", "errored_by", "tag", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pipeline_id"]) -> MetaOapg.properties.pipeline_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project_slug"]) -> MetaOapg.properties.project_slug: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["started_by"]) -> MetaOapg.properties.started_by: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pipeline_number"]) -> MetaOapg.properties.pipeline_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stopped_at"]) -> MetaOapg.properties.stopped_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["canceled_by"]) -> typing.Union[MetaOapg.properties.canceled_by, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errored_by"]) -> typing.Union[MetaOapg.properties.errored_by, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tag"]) -> typing.Union[MetaOapg.properties.tag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["pipeline_id", "id", "name", "project_slug", "status", "started_by", "pipeline_number", "created_at", "stopped_at", "canceled_by", "errored_by", "tag", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        project_slug: typing.Union[MetaOapg.properties.project_slug, str, ],
        pipeline_number: typing.Union[MetaOapg.properties.pipeline_number, decimal.Decimal, int, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        pipeline_id: typing.Union[MetaOapg.properties.pipeline_id, str, uuid.UUID, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        stopped_at: typing.Union[MetaOapg.properties.stopped_at, str, datetime, ],
        started_by: typing.Union[MetaOapg.properties.started_by, str, uuid.UUID, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        canceled_by: typing.Union[MetaOapg.properties.canceled_by, str, uuid.UUID, schemas.Unset] = schemas.unset,
        errored_by: typing.Union[MetaOapg.properties.errored_by, str, uuid.UUID, schemas.Unset] = schemas.unset,
        tag: typing.Union[MetaOapg.properties.tag, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WorkflowGetByIdResponse':
        return super().__new__(
            cls,
            *args,
            project_slug=project_slug,
            pipeline_number=pipeline_number,
            name=name,
            pipeline_id=pipeline_id,
            created_at=created_at,
            id=id,
            stopped_at=stopped_at,
            started_by=started_by,
            status=status,
            canceled_by=canceled_by,
            errored_by=errored_by,
            tag=tag,
            _configuration=_configuration,
            **kwargs,
        )
