# coding: utf-8

"""
    CircleCI API

    This describes the resources that make up the CircleCI API v2.

    The version of the OpenAPI document: v2
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle_ci_python_sdk import schemas  # noqa: F401


class PipelineContinueExecutionRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "configuration",
            "continuation-key",
        }
        
        class properties:
            continuation_key = schemas.StrSchema
            configuration = schemas.StrSchema
        
            @staticmethod
            def parameters() -> typing.Type['PipelineContinueExecutionRequestParameters']:
                return PipelineContinueExecutionRequestParameters
            __annotations__ = {
                "continuation-key": continuation_key,
                "configuration": configuration,
                "parameters": parameters,
            }
    
    configuration: MetaOapg.properties.configuration
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["continuation-key"]) -> MetaOapg.properties.continuation_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["configuration"]) -> MetaOapg.properties.configuration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parameters"]) -> 'PipelineContinueExecutionRequestParameters': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["continuation-key", "configuration", "parameters", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["continuation-key"]) -> MetaOapg.properties.continuation_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["configuration"]) -> MetaOapg.properties.configuration: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parameters"]) -> typing.Union['PipelineContinueExecutionRequestParameters', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["continuation-key", "configuration", "parameters", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        configuration: typing.Union[MetaOapg.properties.configuration, str, ],
        parameters: typing.Union['PipelineContinueExecutionRequestParameters', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PipelineContinueExecutionRequest':
        return super().__new__(
            cls,
            *args,
            configuration=configuration,
            parameters=parameters,
            _configuration=_configuration,
            **kwargs,
        )

from circle_ci_python_sdk.model.pipeline_continue_execution_request_parameters import PipelineContinueExecutionRequestParameters
