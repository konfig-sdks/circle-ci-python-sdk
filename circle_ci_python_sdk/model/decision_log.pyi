# coding: utf-8

"""
    CircleCI API

    This describes the resources that make up the CircleCI API v2.

    The version of the OpenAPI document: v2
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle_ci_python_sdk import schemas  # noqa: F401


class DecisionLog(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            created_at = schemas.DateTimeSchema
        
            @staticmethod
            def decision() -> typing.Type['Decision']:
                return Decision
            id = schemas.UUIDSchema
        
            @staticmethod
            def metadata() -> typing.Type['DecisionLogMetadata']:
                return DecisionLogMetadata
        
            @staticmethod
            def policies() -> typing.Type['DecisionLogPolicies']:
                return DecisionLogPolicies
            time_taken_ms = schemas.IntSchema
            __annotations__ = {
                "created_at": created_at,
                "decision": decision,
                "id": id,
                "metadata": metadata,
                "policies": policies,
                "time_taken_ms": time_taken_ms,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["decision"]) -> 'Decision': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'DecisionLogMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policies"]) -> 'DecisionLogPolicies': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_taken_ms"]) -> MetaOapg.properties.time_taken_ms: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["created_at", "decision", "id", "metadata", "policies", "time_taken_ms", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["decision"]) -> typing.Union['Decision', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union['DecisionLogMetadata', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policies"]) -> typing.Union['DecisionLogPolicies', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_taken_ms"]) -> typing.Union[MetaOapg.properties.time_taken_ms, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["created_at", "decision", "id", "metadata", "policies", "time_taken_ms", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        decision: typing.Union['Decision', schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        metadata: typing.Union['DecisionLogMetadata', schemas.Unset] = schemas.unset,
        policies: typing.Union['DecisionLogPolicies', schemas.Unset] = schemas.unset,
        time_taken_ms: typing.Union[MetaOapg.properties.time_taken_ms, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DecisionLog':
        return super().__new__(
            cls,
            *args,
            created_at=created_at,
            decision=decision,
            id=id,
            metadata=metadata,
            policies=policies,
            time_taken_ms=time_taken_ms,
            _configuration=_configuration,
            **kwargs,
        )

from circle_ci_python_sdk.model.decision import Decision
from circle_ci_python_sdk.model.decision_log_metadata import DecisionLogMetadata
from circle_ci_python_sdk.model.decision_log_policies import DecisionLogPolicies
