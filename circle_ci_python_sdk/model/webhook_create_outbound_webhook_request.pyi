# coding: utf-8

"""
    CircleCI API

    This describes the resources that make up the CircleCI API v2.

    The version of the OpenAPI document: v2
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle_ci_python_sdk import schemas  # noqa: F401


class WebhookCreateOutboundWebhookRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The parameters for a create webhook request
    """


    class MetaOapg:
        required = {
            "scope",
            "name",
            "signing-secret",
            "verify-tls",
            "events",
            "url",
        }
        
        class properties:
            name = schemas.StrSchema
        
            @staticmethod
            def events() -> typing.Type['WebhookCreateOutboundWebhookRequestEvents']:
                return WebhookCreateOutboundWebhookRequestEvents
            url = schemas.StrSchema
            verify_tls = schemas.BoolSchema
            signing_secret = schemas.StrSchema
        
            @staticmethod
            def scope() -> typing.Type['WebhookCreateOutboundWebhookRequestScope']:
                return WebhookCreateOutboundWebhookRequestScope
            __annotations__ = {
                "name": name,
                "events": events,
                "url": url,
                "verify-tls": verify_tls,
                "signing-secret": signing_secret,
                "scope": scope,
            }
    
    scope: 'WebhookCreateOutboundWebhookRequestScope'
    name: MetaOapg.properties.name
    events: 'WebhookCreateOutboundWebhookRequestEvents'
    url: MetaOapg.properties.url
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["events"]) -> 'WebhookCreateOutboundWebhookRequestEvents': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verify-tls"]) -> MetaOapg.properties.verify_tls: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signing-secret"]) -> MetaOapg.properties.signing_secret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scope"]) -> 'WebhookCreateOutboundWebhookRequestScope': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "events", "url", "verify-tls", "signing-secret", "scope", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["events"]) -> 'WebhookCreateOutboundWebhookRequestEvents': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verify-tls"]) -> MetaOapg.properties.verify_tls: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signing-secret"]) -> MetaOapg.properties.signing_secret: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scope"]) -> 'WebhookCreateOutboundWebhookRequestScope': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "events", "url", "verify-tls", "signing-secret", "scope", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        scope: 'WebhookCreateOutboundWebhookRequestScope',
        name: typing.Union[MetaOapg.properties.name, str, ],
        events: 'WebhookCreateOutboundWebhookRequestEvents',
        url: typing.Union[MetaOapg.properties.url, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WebhookCreateOutboundWebhookRequest':
        return super().__new__(
            cls,
            *args,
            scope=scope,
            name=name,
            events=events,
            url=url,
            _configuration=_configuration,
            **kwargs,
        )

from circle_ci_python_sdk.model.webhook_create_outbound_webhook_request_events import WebhookCreateOutboundWebhookRequestEvents
from circle_ci_python_sdk.model.webhook_create_outbound_webhook_request_scope import WebhookCreateOutboundWebhookRequestScope
