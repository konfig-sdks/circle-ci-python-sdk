# coding: utf-8

"""
    CircleCI API

    This describes the resources that make up the CircleCI API v2.

    The version of the OpenAPI document: v2
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle_ci_python_sdk import schemas  # noqa: F401


class InsightsGetProjectSummaryMetricsResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            org_id = schemas.AnyTypeSchema
            project_id = schemas.AnyTypeSchema
        
            @staticmethod
            def project_data() -> typing.Type['InsightsGetProjectSummaryMetricsResponseProjectData']:
                return InsightsGetProjectSummaryMetricsResponseProjectData
        
            @staticmethod
            def project_workflow_data() -> typing.Type['InsightsGetProjectSummaryMetricsResponseProjectWorkflowData']:
                return InsightsGetProjectSummaryMetricsResponseProjectWorkflowData
        
            @staticmethod
            def project_workflow_branch_data() -> typing.Type['InsightsGetProjectSummaryMetricsResponseProjectWorkflowBranchData']:
                return InsightsGetProjectSummaryMetricsResponseProjectWorkflowBranchData
        
            @staticmethod
            def all_branches() -> typing.Type['InsightsGetProjectSummaryMetricsResponseAllBranches']:
                return InsightsGetProjectSummaryMetricsResponseAllBranches
        
            @staticmethod
            def all_workflows() -> typing.Type['InsightsGetProjectSummaryMetricsResponseAllWorkflows']:
                return InsightsGetProjectSummaryMetricsResponseAllWorkflows
            __annotations__ = {
                "org_id": org_id,
                "project_id": project_id,
                "project_data": project_data,
                "project_workflow_data": project_workflow_data,
                "project_workflow_branch_data": project_workflow_branch_data,
                "all_branches": all_branches,
                "all_workflows": all_workflows,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_id"]) -> MetaOapg.properties.org_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project_id"]) -> MetaOapg.properties.project_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project_data"]) -> 'InsightsGetProjectSummaryMetricsResponseProjectData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project_workflow_data"]) -> 'InsightsGetProjectSummaryMetricsResponseProjectWorkflowData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project_workflow_branch_data"]) -> 'InsightsGetProjectSummaryMetricsResponseProjectWorkflowBranchData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["all_branches"]) -> 'InsightsGetProjectSummaryMetricsResponseAllBranches': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["all_workflows"]) -> 'InsightsGetProjectSummaryMetricsResponseAllWorkflows': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["org_id", "project_id", "project_data", "project_workflow_data", "project_workflow_branch_data", "all_branches", "all_workflows", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_id"]) -> typing.Union[MetaOapg.properties.org_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project_id"]) -> typing.Union[MetaOapg.properties.project_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project_data"]) -> typing.Union['InsightsGetProjectSummaryMetricsResponseProjectData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project_workflow_data"]) -> typing.Union['InsightsGetProjectSummaryMetricsResponseProjectWorkflowData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project_workflow_branch_data"]) -> typing.Union['InsightsGetProjectSummaryMetricsResponseProjectWorkflowBranchData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["all_branches"]) -> typing.Union['InsightsGetProjectSummaryMetricsResponseAllBranches', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["all_workflows"]) -> typing.Union['InsightsGetProjectSummaryMetricsResponseAllWorkflows', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["org_id", "project_id", "project_data", "project_workflow_data", "project_workflow_branch_data", "all_branches", "all_workflows", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        org_id: typing.Union[MetaOapg.properties.org_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        project_id: typing.Union[MetaOapg.properties.project_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        project_data: typing.Union['InsightsGetProjectSummaryMetricsResponseProjectData', schemas.Unset] = schemas.unset,
        project_workflow_data: typing.Union['InsightsGetProjectSummaryMetricsResponseProjectWorkflowData', schemas.Unset] = schemas.unset,
        project_workflow_branch_data: typing.Union['InsightsGetProjectSummaryMetricsResponseProjectWorkflowBranchData', schemas.Unset] = schemas.unset,
        all_branches: typing.Union['InsightsGetProjectSummaryMetricsResponseAllBranches', schemas.Unset] = schemas.unset,
        all_workflows: typing.Union['InsightsGetProjectSummaryMetricsResponseAllWorkflows', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InsightsGetProjectSummaryMetricsResponse':
        return super().__new__(
            cls,
            *args,
            org_id=org_id,
            project_id=project_id,
            project_data=project_data,
            project_workflow_data=project_workflow_data,
            project_workflow_branch_data=project_workflow_branch_data,
            all_branches=all_branches,
            all_workflows=all_workflows,
            _configuration=_configuration,
            **kwargs,
        )

from circle_ci_python_sdk.model.insights_get_project_summary_metrics_response_all_branches import InsightsGetProjectSummaryMetricsResponseAllBranches
from circle_ci_python_sdk.model.insights_get_project_summary_metrics_response_all_workflows import InsightsGetProjectSummaryMetricsResponseAllWorkflows
from circle_ci_python_sdk.model.insights_get_project_summary_metrics_response_project_data import InsightsGetProjectSummaryMetricsResponseProjectData
from circle_ci_python_sdk.model.insights_get_project_summary_metrics_response_project_workflow_branch_data import InsightsGetProjectSummaryMetricsResponseProjectWorkflowBranchData
from circle_ci_python_sdk.model.insights_get_project_summary_metrics_response_project_workflow_data import InsightsGetProjectSummaryMetricsResponseProjectWorkflowData
