# coding: utf-8

"""
    CircleCI API

    This describes the resources that make up the CircleCI API v2.

    The version of the OpenAPI document: v2
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle_ci_python_sdk import schemas  # noqa: F401


class WorkflowRerunWorkflowRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The information you can supply when rerunning a workflow.
    """


    class MetaOapg:
        
        class properties:
            enable_ssh = schemas.BoolSchema
            from_failed = schemas.BoolSchema
        
            @staticmethod
            def jobs() -> typing.Type['WorkflowRerunWorkflowRequestJobs']:
                return WorkflowRerunWorkflowRequestJobs
            sparse_tree = schemas.BoolSchema
            __annotations__ = {
                "enable_ssh": enable_ssh,
                "from_failed": from_failed,
                "jobs": jobs,
                "sparse_tree": sparse_tree,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_ssh"]) -> MetaOapg.properties.enable_ssh: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from_failed"]) -> MetaOapg.properties.from_failed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobs"]) -> 'WorkflowRerunWorkflowRequestJobs': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sparse_tree"]) -> MetaOapg.properties.sparse_tree: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["enable_ssh", "from_failed", "jobs", "sparse_tree", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_ssh"]) -> typing.Union[MetaOapg.properties.enable_ssh, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from_failed"]) -> typing.Union[MetaOapg.properties.from_failed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobs"]) -> typing.Union['WorkflowRerunWorkflowRequestJobs', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sparse_tree"]) -> typing.Union[MetaOapg.properties.sparse_tree, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["enable_ssh", "from_failed", "jobs", "sparse_tree", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        enable_ssh: typing.Union[MetaOapg.properties.enable_ssh, bool, schemas.Unset] = schemas.unset,
        from_failed: typing.Union[MetaOapg.properties.from_failed, bool, schemas.Unset] = schemas.unset,
        jobs: typing.Union['WorkflowRerunWorkflowRequestJobs', schemas.Unset] = schemas.unset,
        sparse_tree: typing.Union[MetaOapg.properties.sparse_tree, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WorkflowRerunWorkflowRequest':
        return super().__new__(
            cls,
            *args,
            enable_ssh=enable_ssh,
            from_failed=from_failed,
            jobs=jobs,
            sparse_tree=sparse_tree,
            _configuration=_configuration,
            **kwargs,
        )

from circle_ci_python_sdk.model.workflow_rerun_workflow_request_jobs import WorkflowRerunWorkflowRequestJobs
