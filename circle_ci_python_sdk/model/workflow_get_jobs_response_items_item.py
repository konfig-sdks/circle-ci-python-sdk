# coding: utf-8

"""
    CircleCI API

    This describes the resources that make up the CircleCI API v2.

    The version of the OpenAPI document: v2
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle_ci_python_sdk import schemas  # noqa: F401


class WorkflowGetJobsResponseItemsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Job
    """


    class MetaOapg:
        required = {
            "project_slug",
            "name",
            "started_at",
            "id",
            "type",
            "dependencies",
            "status",
        }
        
        class properties:
        
            @staticmethod
            def dependencies() -> typing.Type['WorkflowGetJobsResponseItemsItemDependencies']:
                return WorkflowGetJobsResponseItemsItemDependencies
            id = schemas.UUIDSchema
            started_at = schemas.DateTimeSchema
            name = schemas.StrSchema
            project_slug = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "success": "SUCCESS",
                        "running": "RUNNING",
                        "not_run": "NOT_RUN",
                        "failed": "FAILED",
                        "retried": "RETRIED",
                        "queued": "QUEUED",
                        "not_running": "NOT_RUNNING",
                        "infrastructure_fail": "INFRASTRUCTURE_FAIL",
                        "timedout": "TIMEDOUT",
                        "on_hold": "ON_HOLD",
                        "terminated-unknown": "TERMINATEDUNKNOWN",
                        "blocked": "BLOCKED",
                        "canceled": "CANCELED",
                        "unauthorized": "UNAUTHORIZED",
                    }
                
                @schemas.classproperty
                def SUCCESS(cls):
                    return cls("success")
                
                @schemas.classproperty
                def RUNNING(cls):
                    return cls("running")
                
                @schemas.classproperty
                def NOT_RUN(cls):
                    return cls("not_run")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("failed")
                
                @schemas.classproperty
                def RETRIED(cls):
                    return cls("retried")
                
                @schemas.classproperty
                def QUEUED(cls):
                    return cls("queued")
                
                @schemas.classproperty
                def NOT_RUNNING(cls):
                    return cls("not_running")
                
                @schemas.classproperty
                def INFRASTRUCTURE_FAIL(cls):
                    return cls("infrastructure_fail")
                
                @schemas.classproperty
                def TIMEDOUT(cls):
                    return cls("timedout")
                
                @schemas.classproperty
                def ON_HOLD(cls):
                    return cls("on_hold")
                
                @schemas.classproperty
                def TERMINATEDUNKNOWN(cls):
                    return cls("terminated-unknown")
                
                @schemas.classproperty
                def BLOCKED(cls):
                    return cls("blocked")
                
                @schemas.classproperty
                def CANCELED(cls):
                    return cls("canceled")
                
                @schemas.classproperty
                def UNAUTHORIZED(cls):
                    return cls("unauthorized")
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "build": "BUILD",
                        "approval": "APPROVAL",
                    }
                
                @schemas.classproperty
                def BUILD(cls):
                    return cls("build")
                
                @schemas.classproperty
                def APPROVAL(cls):
                    return cls("approval")
            canceled_by = schemas.UUIDSchema
            job_number = schemas.Int64Schema
            approved_by = schemas.UUIDSchema
            stopped_at = schemas.DateTimeSchema
            approval_request_id = schemas.UUIDSchema
            __annotations__ = {
                "dependencies": dependencies,
                "id": id,
                "started_at": started_at,
                "name": name,
                "project_slug": project_slug,
                "status": status,
                "type": type,
                "canceled_by": canceled_by,
                "job_number": job_number,
                "approved_by": approved_by,
                "stopped_at": stopped_at,
                "approval_request_id": approval_request_id,
            }
    
    project_slug: MetaOapg.properties.project_slug
    name: MetaOapg.properties.name
    started_at: MetaOapg.properties.started_at
    id: MetaOapg.properties.id
    type: MetaOapg.properties.type
    dependencies: 'WorkflowGetJobsResponseItemsItemDependencies'
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dependencies"]) -> 'WorkflowGetJobsResponseItemsItemDependencies': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["started_at"]) -> MetaOapg.properties.started_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project_slug"]) -> MetaOapg.properties.project_slug: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["canceled_by"]) -> MetaOapg.properties.canceled_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_number"]) -> MetaOapg.properties.job_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approved_by"]) -> MetaOapg.properties.approved_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stopped_at"]) -> MetaOapg.properties.stopped_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approval_request_id"]) -> MetaOapg.properties.approval_request_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dependencies", "id", "started_at", "name", "project_slug", "status", "type", "canceled_by", "job_number", "approved_by", "stopped_at", "approval_request_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dependencies"]) -> 'WorkflowGetJobsResponseItemsItemDependencies': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["started_at"]) -> MetaOapg.properties.started_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project_slug"]) -> MetaOapg.properties.project_slug: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["canceled_by"]) -> typing.Union[MetaOapg.properties.canceled_by, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_number"]) -> typing.Union[MetaOapg.properties.job_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approved_by"]) -> typing.Union[MetaOapg.properties.approved_by, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stopped_at"]) -> typing.Union[MetaOapg.properties.stopped_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approval_request_id"]) -> typing.Union[MetaOapg.properties.approval_request_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dependencies", "id", "started_at", "name", "project_slug", "status", "type", "canceled_by", "job_number", "approved_by", "stopped_at", "approval_request_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        project_slug: typing.Union[MetaOapg.properties.project_slug, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        started_at: typing.Union[MetaOapg.properties.started_at, str, datetime, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        dependencies: 'WorkflowGetJobsResponseItemsItemDependencies',
        status: typing.Union[MetaOapg.properties.status, str, ],
        canceled_by: typing.Union[MetaOapg.properties.canceled_by, str, uuid.UUID, schemas.Unset] = schemas.unset,
        job_number: typing.Union[MetaOapg.properties.job_number, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        approved_by: typing.Union[MetaOapg.properties.approved_by, str, uuid.UUID, schemas.Unset] = schemas.unset,
        stopped_at: typing.Union[MetaOapg.properties.stopped_at, str, datetime, schemas.Unset] = schemas.unset,
        approval_request_id: typing.Union[MetaOapg.properties.approval_request_id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WorkflowGetJobsResponseItemsItem':
        return super().__new__(
            cls,
            *args,
            project_slug=project_slug,
            name=name,
            started_at=started_at,
            id=id,
            type=type,
            dependencies=dependencies,
            status=status,
            canceled_by=canceled_by,
            job_number=job_number,
            approved_by=approved_by,
            stopped_at=stopped_at,
            approval_request_id=approval_request_id,
            _configuration=_configuration,
            **kwargs,
        )

from circle_ci_python_sdk.model.workflow_get_jobs_response_items_item_dependencies import WorkflowGetJobsResponseItemsItemDependencies
