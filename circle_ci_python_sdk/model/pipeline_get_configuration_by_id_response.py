# coding: utf-8

"""
    CircleCI API

    This describes the resources that make up the CircleCI API v2.

    The version of the OpenAPI document: v2
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle_ci_python_sdk import schemas  # noqa: F401


class PipelineGetConfigurationByIdResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The configuration strings for the pipeline.
    """


    class MetaOapg:
        required = {
            "compiled",
            "source",
        }
        
        class properties:
            source = schemas.StrSchema
            compiled = schemas.StrSchema
            setup_config = schemas.StrSchema
            compiled_setup_config = schemas.StrSchema
            __annotations__ = {
                "source": source,
                "compiled": compiled,
                "setup-config": setup_config,
                "compiled-setup-config": compiled_setup_config,
            }
    
    compiled: MetaOapg.properties.compiled
    source: MetaOapg.properties.source
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compiled"]) -> MetaOapg.properties.compiled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["setup-config"]) -> MetaOapg.properties.setup_config: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compiled-setup-config"]) -> MetaOapg.properties.compiled_setup_config: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["source", "compiled", "setup-config", "compiled-setup-config", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compiled"]) -> MetaOapg.properties.compiled: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["setup-config"]) -> typing.Union[MetaOapg.properties.setup_config, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compiled-setup-config"]) -> typing.Union[MetaOapg.properties.compiled_setup_config, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["source", "compiled", "setup-config", "compiled-setup-config", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        compiled: typing.Union[MetaOapg.properties.compiled, str, ],
        source: typing.Union[MetaOapg.properties.source, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PipelineGetConfigurationByIdResponse':
        return super().__new__(
            cls,
            *args,
            compiled=compiled,
            source=source,
            _configuration=_configuration,
            **kwargs,
        )
