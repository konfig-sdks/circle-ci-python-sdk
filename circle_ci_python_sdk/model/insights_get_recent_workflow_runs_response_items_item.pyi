# coding: utf-8

"""
    CircleCI API

    This describes the resources that make up the CircleCI API v2.

    The version of the OpenAPI document: v2
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle_ci_python_sdk import schemas  # noqa: F401


class InsightsGetRecentWorkflowRunsResponseItemsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "duration",
            "created_at",
            "id",
            "stopped_at",
            "branch",
            "is_approval",
            "credits_used",
            "status",
        }
        
        class properties:
            id = schemas.UUIDSchema
            branch = schemas.StrSchema
            
            
            class duration(
                schemas.Int64Schema
            ):
                pass
            created_at = schemas.DateTimeSchema
            stopped_at = schemas.DateTimeSchema
            
            
            class credits_used(
                schemas.Int64Schema
            ):
                pass
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def SUCCESS(cls):
                    return cls("success")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("failed")
                
                @schemas.classproperty
                def ERROR(cls):
                    return cls("error")
                
                @schemas.classproperty
                def CANCELED(cls):
                    return cls("canceled")
                
                @schemas.classproperty
                def UNAUTHORIZED(cls):
                    return cls("unauthorized")
            is_approval = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "branch": branch,
                "duration": duration,
                "created_at": created_at,
                "stopped_at": stopped_at,
                "credits_used": credits_used,
                "status": status,
                "is_approval": is_approval,
            }
    
    duration: MetaOapg.properties.duration
    created_at: MetaOapg.properties.created_at
    id: MetaOapg.properties.id
    stopped_at: MetaOapg.properties.stopped_at
    branch: MetaOapg.properties.branch
    is_approval: MetaOapg.properties.is_approval
    credits_used: MetaOapg.properties.credits_used
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["branch"]) -> MetaOapg.properties.branch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stopped_at"]) -> MetaOapg.properties.stopped_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["credits_used"]) -> MetaOapg.properties.credits_used: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_approval"]) -> MetaOapg.properties.is_approval: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "branch", "duration", "created_at", "stopped_at", "credits_used", "status", "is_approval", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["branch"]) -> MetaOapg.properties.branch: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stopped_at"]) -> MetaOapg.properties.stopped_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["credits_used"]) -> MetaOapg.properties.credits_used: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_approval"]) -> MetaOapg.properties.is_approval: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "branch", "duration", "created_at", "stopped_at", "credits_used", "status", "is_approval", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        duration: typing.Union[MetaOapg.properties.duration, decimal.Decimal, int, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        stopped_at: typing.Union[MetaOapg.properties.stopped_at, str, datetime, ],
        branch: typing.Union[MetaOapg.properties.branch, str, ],
        is_approval: typing.Union[MetaOapg.properties.is_approval, bool, ],
        credits_used: typing.Union[MetaOapg.properties.credits_used, decimal.Decimal, int, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InsightsGetRecentWorkflowRunsResponseItemsItem':
        return super().__new__(
            cls,
            *args,
            duration=duration,
            created_at=created_at,
            id=id,
            stopped_at=stopped_at,
            branch=branch,
            is_approval=is_approval,
            credits_used=credits_used,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )
