# coding: utf-8

"""
    CircleCI API

    This describes the resources that make up the CircleCI API v2.

    The version of the OpenAPI document: v2
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle_ci_python_sdk import schemas  # noqa: F401


class InsightsGetProjectWorkflowTestMetricsResponseTestRunsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "test_counts",
            "workflow_id",
            "pipeline_number",
            "success_rate",
        }
        
        class properties:
            
            
            class pipeline_number(
                schemas.Int64Schema
            ):
            
            
                class MetaOapg:
                    format = 'int64'
                    inclusive_minimum = 0
            workflow_id = schemas.AnyTypeSchema
            success_rate = schemas.Float32Schema
        
            @staticmethod
            def test_counts() -> typing.Type['InsightsGetProjectWorkflowTestMetricsResponseTestRunsItemTestCounts']:
                return InsightsGetProjectWorkflowTestMetricsResponseTestRunsItemTestCounts
            __annotations__ = {
                "pipeline_number": pipeline_number,
                "workflow_id": workflow_id,
                "success_rate": success_rate,
                "test_counts": test_counts,
            }
    
    test_counts: 'InsightsGetProjectWorkflowTestMetricsResponseTestRunsItemTestCounts'
    workflow_id: MetaOapg.properties.workflow_id
    pipeline_number: MetaOapg.properties.pipeline_number
    success_rate: MetaOapg.properties.success_rate
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pipeline_number"]) -> MetaOapg.properties.pipeline_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflow_id"]) -> MetaOapg.properties.workflow_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["success_rate"]) -> MetaOapg.properties.success_rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["test_counts"]) -> 'InsightsGetProjectWorkflowTestMetricsResponseTestRunsItemTestCounts': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["pipeline_number", "workflow_id", "success_rate", "test_counts", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pipeline_number"]) -> MetaOapg.properties.pipeline_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflow_id"]) -> MetaOapg.properties.workflow_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["success_rate"]) -> MetaOapg.properties.success_rate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["test_counts"]) -> 'InsightsGetProjectWorkflowTestMetricsResponseTestRunsItemTestCounts': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["pipeline_number", "workflow_id", "success_rate", "test_counts", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        test_counts: 'InsightsGetProjectWorkflowTestMetricsResponseTestRunsItemTestCounts',
        workflow_id: typing.Union[MetaOapg.properties.workflow_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        pipeline_number: typing.Union[MetaOapg.properties.pipeline_number, decimal.Decimal, int, ],
        success_rate: typing.Union[MetaOapg.properties.success_rate, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InsightsGetProjectWorkflowTestMetricsResponseTestRunsItem':
        return super().__new__(
            cls,
            *args,
            test_counts=test_counts,
            workflow_id=workflow_id,
            pipeline_number=pipeline_number,
            success_rate=success_rate,
            _configuration=_configuration,
            **kwargs,
        )

from circle_ci_python_sdk.model.insights_get_project_workflow_test_metrics_response_test_runs_item_test_counts import InsightsGetProjectWorkflowTestMetricsResponseTestRunsItemTestCounts
