# coding: utf-8

"""
    CircleCI API

    This describes the resources that make up the CircleCI API v2.

    The version of the OpenAPI document: v2
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle_ci_python_sdk import schemas  # noqa: F401


class InsightsGetProjectWorkflowTestMetricsResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Project level test metrics response
    """


    class MetaOapg:
        required = {
            "slowest_tests_extra",
            "most_failed_tests_extra",
            "total_test_runs",
            "slowest_tests",
            "average_test_count",
            "test_runs",
            "most_failed_tests",
        }
        
        class properties:
            
            
            class average_test_count(
                schemas.Int64Schema
            ):
            
            
                class MetaOapg:
                    format = 'int64'
                    inclusive_minimum = 0
        
            @staticmethod
            def most_failed_tests() -> typing.Type['InsightsGetProjectWorkflowTestMetricsResponseMostFailedTests']:
                return InsightsGetProjectWorkflowTestMetricsResponseMostFailedTests
            
            
            class most_failed_tests_extra(
                schemas.Int64Schema
            ):
            
            
                class MetaOapg:
                    format = 'int64'
                    inclusive_minimum = 0
        
            @staticmethod
            def slowest_tests() -> typing.Type['InsightsGetProjectWorkflowTestMetricsResponseSlowestTests']:
                return InsightsGetProjectWorkflowTestMetricsResponseSlowestTests
            
            
            class slowest_tests_extra(
                schemas.Int64Schema
            ):
            
            
                class MetaOapg:
                    format = 'int64'
                    inclusive_minimum = 0
            
            
            class total_test_runs(
                schemas.Int64Schema
            ):
            
            
                class MetaOapg:
                    format = 'int64'
                    inclusive_minimum = 0
        
            @staticmethod
            def test_runs() -> typing.Type['InsightsGetProjectWorkflowTestMetricsResponseTestRuns']:
                return InsightsGetProjectWorkflowTestMetricsResponseTestRuns
            __annotations__ = {
                "average_test_count": average_test_count,
                "most_failed_tests": most_failed_tests,
                "most_failed_tests_extra": most_failed_tests_extra,
                "slowest_tests": slowest_tests,
                "slowest_tests_extra": slowest_tests_extra,
                "total_test_runs": total_test_runs,
                "test_runs": test_runs,
            }
    
    slowest_tests_extra: MetaOapg.properties.slowest_tests_extra
    most_failed_tests_extra: MetaOapg.properties.most_failed_tests_extra
    total_test_runs: MetaOapg.properties.total_test_runs
    slowest_tests: 'InsightsGetProjectWorkflowTestMetricsResponseSlowestTests'
    average_test_count: MetaOapg.properties.average_test_count
    test_runs: 'InsightsGetProjectWorkflowTestMetricsResponseTestRuns'
    most_failed_tests: 'InsightsGetProjectWorkflowTestMetricsResponseMostFailedTests'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["average_test_count"]) -> MetaOapg.properties.average_test_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["most_failed_tests"]) -> 'InsightsGetProjectWorkflowTestMetricsResponseMostFailedTests': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["most_failed_tests_extra"]) -> MetaOapg.properties.most_failed_tests_extra: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slowest_tests"]) -> 'InsightsGetProjectWorkflowTestMetricsResponseSlowestTests': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slowest_tests_extra"]) -> MetaOapg.properties.slowest_tests_extra: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_test_runs"]) -> MetaOapg.properties.total_test_runs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["test_runs"]) -> 'InsightsGetProjectWorkflowTestMetricsResponseTestRuns': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["average_test_count", "most_failed_tests", "most_failed_tests_extra", "slowest_tests", "slowest_tests_extra", "total_test_runs", "test_runs", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["average_test_count"]) -> MetaOapg.properties.average_test_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["most_failed_tests"]) -> 'InsightsGetProjectWorkflowTestMetricsResponseMostFailedTests': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["most_failed_tests_extra"]) -> MetaOapg.properties.most_failed_tests_extra: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slowest_tests"]) -> 'InsightsGetProjectWorkflowTestMetricsResponseSlowestTests': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slowest_tests_extra"]) -> MetaOapg.properties.slowest_tests_extra: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_test_runs"]) -> MetaOapg.properties.total_test_runs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["test_runs"]) -> 'InsightsGetProjectWorkflowTestMetricsResponseTestRuns': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["average_test_count", "most_failed_tests", "most_failed_tests_extra", "slowest_tests", "slowest_tests_extra", "total_test_runs", "test_runs", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        slowest_tests_extra: typing.Union[MetaOapg.properties.slowest_tests_extra, decimal.Decimal, int, ],
        most_failed_tests_extra: typing.Union[MetaOapg.properties.most_failed_tests_extra, decimal.Decimal, int, ],
        total_test_runs: typing.Union[MetaOapg.properties.total_test_runs, decimal.Decimal, int, ],
        slowest_tests: 'InsightsGetProjectWorkflowTestMetricsResponseSlowestTests',
        average_test_count: typing.Union[MetaOapg.properties.average_test_count, decimal.Decimal, int, ],
        test_runs: 'InsightsGetProjectWorkflowTestMetricsResponseTestRuns',
        most_failed_tests: 'InsightsGetProjectWorkflowTestMetricsResponseMostFailedTests',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InsightsGetProjectWorkflowTestMetricsResponse':
        return super().__new__(
            cls,
            *args,
            slowest_tests_extra=slowest_tests_extra,
            most_failed_tests_extra=most_failed_tests_extra,
            total_test_runs=total_test_runs,
            slowest_tests=slowest_tests,
            average_test_count=average_test_count,
            test_runs=test_runs,
            most_failed_tests=most_failed_tests,
            _configuration=_configuration,
            **kwargs,
        )

from circle_ci_python_sdk.model.insights_get_project_workflow_test_metrics_response_most_failed_tests import InsightsGetProjectWorkflowTestMetricsResponseMostFailedTests
from circle_ci_python_sdk.model.insights_get_project_workflow_test_metrics_response_slowest_tests import InsightsGetProjectWorkflowTestMetricsResponseSlowestTests
from circle_ci_python_sdk.model.insights_get_project_workflow_test_metrics_response_test_runs import InsightsGetProjectWorkflowTestMetricsResponseTestRuns
