# coding: utf-8

"""
    CircleCI API

    This describes the resources that make up the CircleCI API v2.

    The version of the OpenAPI document: v2
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle_ci_python_sdk import schemas  # noqa: F401


class Decision(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "status",
        }
        
        class properties:
            status = schemas.StrSchema
        
            @staticmethod
            def enabled_rules() -> typing.Type['DecisionEnabledRules']:
                return DecisionEnabledRules
            
            
            class hard_failures(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Violation']:
                        return Violation
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Violation'], typing.List['Violation']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hard_failures':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Violation':
                    return super().__getitem__(i)
            reason = schemas.StrSchema
            
            
            class soft_failures(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Violation']:
                        return Violation
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Violation'], typing.List['Violation']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'soft_failures':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Violation':
                    return super().__getitem__(i)
            __annotations__ = {
                "status": status,
                "enabled_rules": enabled_rules,
                "hard_failures": hard_failures,
                "reason": reason,
                "soft_failures": soft_failures,
            }
    
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enabled_rules"]) -> 'DecisionEnabledRules': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hard_failures"]) -> MetaOapg.properties.hard_failures: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["soft_failures"]) -> MetaOapg.properties.soft_failures: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["status", "enabled_rules", "hard_failures", "reason", "soft_failures", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enabled_rules"]) -> typing.Union['DecisionEnabledRules', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hard_failures"]) -> typing.Union[MetaOapg.properties.hard_failures, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["soft_failures"]) -> typing.Union[MetaOapg.properties.soft_failures, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["status", "enabled_rules", "hard_failures", "reason", "soft_failures", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        enabled_rules: typing.Union['DecisionEnabledRules', schemas.Unset] = schemas.unset,
        hard_failures: typing.Union[MetaOapg.properties.hard_failures, list, tuple, schemas.Unset] = schemas.unset,
        reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
        soft_failures: typing.Union[MetaOapg.properties.soft_failures, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Decision':
        return super().__new__(
            cls,
            *args,
            status=status,
            enabled_rules=enabled_rules,
            hard_failures=hard_failures,
            reason=reason,
            soft_failures=soft_failures,
            _configuration=_configuration,
            **kwargs,
        )

from circle_ci_python_sdk.model.decision_enabled_rules import DecisionEnabledRules
from circle_ci_python_sdk.model.violation import Violation
