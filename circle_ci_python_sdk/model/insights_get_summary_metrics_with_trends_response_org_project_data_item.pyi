# coding: utf-8

"""
    CircleCI API

    This describes the resources that make up the CircleCI API v2.

    The version of the OpenAPI document: v2
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle_ci_python_sdk import schemas  # noqa: F401


class InsightsGetSummaryMetricsWithTrendsResponseOrgProjectDataItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "metrics",
            "project_name",
            "trends",
        }
        
        class properties:
            project_name = schemas.StrSchema
        
            @staticmethod
            def metrics() -> typing.Type['InsightsGetSummaryMetricsWithTrendsResponseOrgProjectDataItemMetrics']:
                return InsightsGetSummaryMetricsWithTrendsResponseOrgProjectDataItemMetrics
        
            @staticmethod
            def trends() -> typing.Type['InsightsGetSummaryMetricsWithTrendsResponseOrgProjectDataItemTrends']:
                return InsightsGetSummaryMetricsWithTrendsResponseOrgProjectDataItemTrends
            __annotations__ = {
                "project_name": project_name,
                "metrics": metrics,
                "trends": trends,
            }
    
    metrics: 'InsightsGetSummaryMetricsWithTrendsResponseOrgProjectDataItemMetrics'
    project_name: MetaOapg.properties.project_name
    trends: 'InsightsGetSummaryMetricsWithTrendsResponseOrgProjectDataItemTrends'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project_name"]) -> MetaOapg.properties.project_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metrics"]) -> 'InsightsGetSummaryMetricsWithTrendsResponseOrgProjectDataItemMetrics': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trends"]) -> 'InsightsGetSummaryMetricsWithTrendsResponseOrgProjectDataItemTrends': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["project_name", "metrics", "trends", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project_name"]) -> MetaOapg.properties.project_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metrics"]) -> 'InsightsGetSummaryMetricsWithTrendsResponseOrgProjectDataItemMetrics': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trends"]) -> 'InsightsGetSummaryMetricsWithTrendsResponseOrgProjectDataItemTrends': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["project_name", "metrics", "trends", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        metrics: 'InsightsGetSummaryMetricsWithTrendsResponseOrgProjectDataItemMetrics',
        project_name: typing.Union[MetaOapg.properties.project_name, str, ],
        trends: 'InsightsGetSummaryMetricsWithTrendsResponseOrgProjectDataItemTrends',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InsightsGetSummaryMetricsWithTrendsResponseOrgProjectDataItem':
        return super().__new__(
            cls,
            *args,
            metrics=metrics,
            project_name=project_name,
            trends=trends,
            _configuration=_configuration,
            **kwargs,
        )

from circle_ci_python_sdk.model.insights_get_summary_metrics_with_trends_response_org_project_data_item_metrics import InsightsGetSummaryMetricsWithTrendsResponseOrgProjectDataItemMetrics
from circle_ci_python_sdk.model.insights_get_summary_metrics_with_trends_response_org_project_data_item_trends import InsightsGetSummaryMetricsWithTrendsResponseOrgProjectDataItemTrends
