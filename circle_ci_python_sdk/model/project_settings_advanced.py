# coding: utf-8

"""
    CircleCI API

    This describes the resources that make up the CircleCI API v2.

    The version of the OpenAPI document: v2
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle_ci_python_sdk import schemas  # noqa: F401


class ProjectSettingsAdvanced(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            autocancel_builds = schemas.BoolSchema
            build_fork_prs = schemas.BoolSchema
            build_prs_only = schemas.BoolSchema
            disable_ssh = schemas.BoolSchema
            forks_receive_secret_env_vars = schemas.BoolSchema
            oss = schemas.BoolSchema
            set_github_status = schemas.BoolSchema
            setup_workflows = schemas.BoolSchema
            write_settings_requires_admin = schemas.BoolSchema
        
            @staticmethod
            def pr_only_branch_overrides() -> typing.Type['ProjectSettingsAdvancedPrOnlyBranchOverrides']:
                return ProjectSettingsAdvancedPrOnlyBranchOverrides
            __annotations__ = {
                "autocancel_builds": autocancel_builds,
                "build_fork_prs": build_fork_prs,
                "build_prs_only": build_prs_only,
                "disable_ssh": disable_ssh,
                "forks_receive_secret_env_vars": forks_receive_secret_env_vars,
                "oss": oss,
                "set_github_status": set_github_status,
                "setup_workflows": setup_workflows,
                "write_settings_requires_admin": write_settings_requires_admin,
                "pr_only_branch_overrides": pr_only_branch_overrides,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["autocancel_builds"]) -> MetaOapg.properties.autocancel_builds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["build_fork_prs"]) -> MetaOapg.properties.build_fork_prs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["build_prs_only"]) -> MetaOapg.properties.build_prs_only: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disable_ssh"]) -> MetaOapg.properties.disable_ssh: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["forks_receive_secret_env_vars"]) -> MetaOapg.properties.forks_receive_secret_env_vars: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oss"]) -> MetaOapg.properties.oss: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["set_github_status"]) -> MetaOapg.properties.set_github_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["setup_workflows"]) -> MetaOapg.properties.setup_workflows: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["write_settings_requires_admin"]) -> MetaOapg.properties.write_settings_requires_admin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pr_only_branch_overrides"]) -> 'ProjectSettingsAdvancedPrOnlyBranchOverrides': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["autocancel_builds", "build_fork_prs", "build_prs_only", "disable_ssh", "forks_receive_secret_env_vars", "oss", "set_github_status", "setup_workflows", "write_settings_requires_admin", "pr_only_branch_overrides", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["autocancel_builds"]) -> typing.Union[MetaOapg.properties.autocancel_builds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["build_fork_prs"]) -> typing.Union[MetaOapg.properties.build_fork_prs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["build_prs_only"]) -> typing.Union[MetaOapg.properties.build_prs_only, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disable_ssh"]) -> typing.Union[MetaOapg.properties.disable_ssh, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["forks_receive_secret_env_vars"]) -> typing.Union[MetaOapg.properties.forks_receive_secret_env_vars, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oss"]) -> typing.Union[MetaOapg.properties.oss, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["set_github_status"]) -> typing.Union[MetaOapg.properties.set_github_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["setup_workflows"]) -> typing.Union[MetaOapg.properties.setup_workflows, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["write_settings_requires_admin"]) -> typing.Union[MetaOapg.properties.write_settings_requires_admin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pr_only_branch_overrides"]) -> typing.Union['ProjectSettingsAdvancedPrOnlyBranchOverrides', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["autocancel_builds", "build_fork_prs", "build_prs_only", "disable_ssh", "forks_receive_secret_env_vars", "oss", "set_github_status", "setup_workflows", "write_settings_requires_admin", "pr_only_branch_overrides", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        autocancel_builds: typing.Union[MetaOapg.properties.autocancel_builds, bool, schemas.Unset] = schemas.unset,
        build_fork_prs: typing.Union[MetaOapg.properties.build_fork_prs, bool, schemas.Unset] = schemas.unset,
        build_prs_only: typing.Union[MetaOapg.properties.build_prs_only, bool, schemas.Unset] = schemas.unset,
        disable_ssh: typing.Union[MetaOapg.properties.disable_ssh, bool, schemas.Unset] = schemas.unset,
        forks_receive_secret_env_vars: typing.Union[MetaOapg.properties.forks_receive_secret_env_vars, bool, schemas.Unset] = schemas.unset,
        oss: typing.Union[MetaOapg.properties.oss, bool, schemas.Unset] = schemas.unset,
        set_github_status: typing.Union[MetaOapg.properties.set_github_status, bool, schemas.Unset] = schemas.unset,
        setup_workflows: typing.Union[MetaOapg.properties.setup_workflows, bool, schemas.Unset] = schemas.unset,
        write_settings_requires_admin: typing.Union[MetaOapg.properties.write_settings_requires_admin, bool, schemas.Unset] = schemas.unset,
        pr_only_branch_overrides: typing.Union['ProjectSettingsAdvancedPrOnlyBranchOverrides', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProjectSettingsAdvanced':
        return super().__new__(
            cls,
            *args,
            autocancel_builds=autocancel_builds,
            build_fork_prs=build_fork_prs,
            build_prs_only=build_prs_only,
            disable_ssh=disable_ssh,
            forks_receive_secret_env_vars=forks_receive_secret_env_vars,
            oss=oss,
            set_github_status=set_github_status,
            setup_workflows=setup_workflows,
            write_settings_requires_admin=write_settings_requires_admin,
            pr_only_branch_overrides=pr_only_branch_overrides,
            _configuration=_configuration,
            **kwargs,
        )

from circle_ci_python_sdk.model.project_settings_advanced_pr_only_branch_overrides import ProjectSettingsAdvancedPrOnlyBranchOverrides
